<?xml version="1.0" encoding="UTF-8"?>
<shaders>
	<snippet id="test">
	<![CDATA[
		//THIS IS TEST!
	]]>		
	</snippet>
	<shader id="old_light" tags="">
		<code type="vertex_shader">
		<![CDATA[
			
			attribute vec3 aVertexPosition;
			attribute vec3 aVertexNormal;
			attribute vec2 aTextureCoord;
			
			uniform mat4 uMVMatrix;
			uniform mat4 uMVPMatrix;
			uniform mat3 uModelT;
			
			uniform vec3  uAmbientColor;
			
			uniform int   uLightType;
			uniform vec3  uLightColor;
			uniform float uLightIntensity;
			uniform float uLightRange;
			uniform float uLightSpotAngle;
			uniform vec3  uLightDirection;
			uniform vec3  uLightPosition;
						
			varying vec2 vTextureCoord;
			varying vec3 vLightWeighting;
			
			vec3 calculateLightWeighting( vec4 mvPosition){
				vec3 transformedNormal = uModelT * aVertexNormal;
				if (uLightType == 0){
					float directionalLightWeighting = max(dot(transformedNormal, uLightDirection), 0.0);
					return uLightColor * directionalLightWeighting;
				}
				else if (uLightType == 1){
					vec3 lightDirection = normalize(uLightPosition - mvPosition.xyz);
		            float directionalLightWeighting = max(dot(transformedNormal, lightDirection), 0.0);
		            float dist = length(uLightPosition - mvPosition.xyz);
		            return (uLightColor * min((dist/uLightRange),1.0) * uLightIntensity) * directionalLightWeighting;
		            //return uLightColor * directionalLightWeighting;
				}

			}
			
			void main(void) {				
				vec4 mvPosition = uMVMatrix * vec4(aVertexPosition, 1.0);
				vTextureCoord = aTextureCoord;
				vLightWeighting = vLightWeighting + calculateLightWeighting(mvPosition) + uAmbientColor;
				gl_Position = uMVPMatrix * vec4(aVertexPosition,1.0);
			}
		]]>
		</code>		
		<code type="pixel_shader">
		<![CDATA[
			#ifdef GL_ES
			precision highp float;
			#endif
			
			varying vec2 vTextureCoord;
			varying vec3 vLightWeighting;
			
			uniform sampler2D uTexture;
			//uniform vec4 uColorObject;

			
			void main(void) {
				vec4 textureColor = texture2D(uTexture, vec2(vTextureCoord.s, vTextureCoord.t));
				gl_FragColor = vec4(textureColor.rgb * vLightWeighting, textureColor.a);
			}
		]]>
		</code>
	</shader>
	<shader id="all_lights" tags="">
		<code type="vertex_shader">
		<![CDATA[
			precision highp float;
			attribute vec3 a_vertex;
			attribute vec3 a_normal;
			attribute vec2 a_coord;
			varying vec3 v_normal;
			varying vec2 v_coord;
			uniform mat4 u_mvp;
			uniform mat4 u_modelt;
			void main() {
				v_coord = a_coord;
				v_normal = (u_modelt * vec4(a_normal,1.0)).xyz;
				gl_Position = u_mvp * vec4(a_vertex,1.0);
			}
		]]>
		</code>
		<code type="pixel_shader">
		<![CDATA[
			precision highp float;
			varying vec3 v_normal;
			varying vec2 v_coord;
			uniform vec3 u_lightvector;
			uniform vec4 u_color;
			uniform sampler2D u_texture;
			void main() {
				vec3 N = normalize(v_normal);
				vec4 color = u_color * texture2D( u_texture, v_coord);
				gl_FragColor = color * max(0.0, dot(u_lightvector,N));
			}
		]]>
		</code>
	</shader>

	<shader id="simple_light" tags="">
		<code type="vertex_shader">
		<![CDATA[
			precision highp float;
			attribute vec3 a_vertex;
			attribute vec3 a_normal;
			attribute vec2 a_coord;
			varying vec3 v_normal;
			varying vec2 v_coord;
			uniform mat4 u_mvp;
			uniform mat4 u_modelt;
			void main() {
				v_coord = a_coord;
				v_normal = (u_modelt * vec4(a_normal,1.0)).xyz;
				gl_Position = u_mvp * vec4(a_vertex,1.0);
			}
		]]>
		</code>
		<code type="pixel_shader">
		<![CDATA[
			precision highp float;
			varying vec3 v_normal;
			varying vec2 v_coord;
			uniform vec3 u_lightvector;
			uniform vec4 u_color;
			uniform sampler2D u_texture;
			void main() {
				vec3 N = normalize(v_normal);
				vec4 color = u_color * texture2D( u_texture, v_coord);
				gl_FragColor = color * max(0.0, dot(u_lightvector,N));
			}
		]]>
		</code>
	</shader>


	<!--
	<shader id="" tags="">
		<code id="vertex_shader">

		</code>
		<code id="pixel_shader">

		</code>
	</shader>
	-->
</shaders>